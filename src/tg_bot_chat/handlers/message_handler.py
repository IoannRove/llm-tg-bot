"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram –±–æ—Ç–∞
"""

import logging
from datetime import datetime

from telegram import Update
from telegram.ext import ContextTypes

from ..services.context_manager import ContextManager, ChatMessage
from ..services.ai_service import AIService
from ..config.settings import Settings


logger = logging.getLogger(__name__)


class MessageHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram"""
    
    def __init__(self, settings: Settings):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Args:
            settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        self.settings = settings
        self.context_manager = ContextManager(settings.redis)
        self.ai_service = AIService(settings.ai, settings.bot)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        """
        if not update.message or not update.message.text:
            return
        
        message = update.message
        chat_id = message.chat_id
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        chat_message = ChatMessage(
            user_id=message.from_user.id,
            username=message.from_user.username,
            message=message.text,
            timestamp=datetime.now(),
            message_id=message.message_id
        )
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        self.context_manager.add_message(chat_id, chat_message)
        
        # –û–±—Ä–µ–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        self.context_manager.trim_context(
            chat_id, 
            self.settings.bot.context_window_size
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        should_respond = self.ai_service.should_respond_to_message(
            message.text,
            self.settings.telegram.bot_username
        )
        
        if should_respond:
            await self._generate_and_send_response(chat_id, message.text, context)
    
    async def _generate_and_send_response(
        self, 
        chat_id: int, 
        message_text: str, 
        context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        """
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–∞—Ç–∞
            chat_context = self.context_manager.get_context(
                chat_id, 
                self.settings.bot.context_window_size
            )
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            ai_response = await self.ai_service.generate_response(
                chat_context,
                message_text,
                self.settings.telegram.bot_username
            )
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
            await context.bot.send_message(
                chat_id=chat_id,
                text=ai_response.content,
                reply_to_message_id=None
            )
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            bot_message = ChatMessage(
                user_id=context.bot.id,
                username=self.settings.telegram.bot_username,
                message=ai_response.content,
                timestamp=datetime.now(),
                message_id=0  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            )
            
            self.context_manager.add_message(chat_id, bot_message)
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            logger.info(
                f"Responded to chat {chat_id} with {ai_response.tokens_used} tokens"
            )
            
        except Exception as e:
            logger.error(f"Error generating response: {e}")
            await context.bot.send_message(
                chat_id=chat_id,
                text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."
            )
    
    async def handle_start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        """
        if not update.message:
            return
        
        welcome_message = f"""
–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —á–∞—Ç–∞.

–Ø –º–æ–≥—É:
‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–≥–¥–∞ –º–µ–Ω—è —É–ø–æ–º–∏–Ω–∞—é—Ç
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: –±–æ—Ç, bot, –ø–æ–º–æ—â—å, help, –≤–æ–ø—Ä–æ—Å, question

–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {self.settings.bot.context_window_size} —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –ú–æ–¥–µ–ª—å: {self.settings.ai.model} ({self.settings.ai.provider})

–ü—Ä–æ—Å—Ç–æ —É–ø–æ–º—è–Ω–∏—Ç–µ –º–µ–Ω—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞!
        """
        
        await update.message.reply_text(welcome_message)
    
    async def handle_clear_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /clear –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        """
        if not update.message:
            return
        
        chat_id = update.message.chat_id
        self.context_manager.clear_context(chat_id)
        
        await update.message.reply_text(
            "–ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω! –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞."
        )
    
    async def handle_status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        """
        if not update.message:
            return
        
        chat_id = update.message.chat_id
        context_size = self.context_manager.get_context_size(chat_id)
        
        status_message = f"""
üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–∞—Ç–∞:

‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {context_size}
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {self.settings.bot.context_window_size}
‚Ä¢ –ú–æ–¥–µ–ª—å: {self.settings.ai.model} ({self.settings.ai.provider})
‚Ä¢ –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç: {self.settings.bot.base_prompt[:100]}...

–ö–æ–º–∞–Ω–¥—ã:
/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
        """
        
        await update.message.reply_text(status_message) 